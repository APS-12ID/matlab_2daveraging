function [rtn, dataNorm, savefilename] = avgfile0_new(avg, m, dirN)
% function avgfile0_new(avg, saxs, dirN)
% Azimuthal average. This function uses Zuo's code.
% avg : photodiode information
% m : q map generated by Zuo's code
% dirN : subdirectory names. e.g. [SAXS, WAXS, PE]
%
% Average SAXS and WAXS data with the fileindex.
% To use this function, load saxssetup.mat or/and waxssetup.mat.
% fullfile(avg.dir, avg.filename), avg.photodiode, avg.absoluteSF
%
% Byeongdu Lee
% 2014/07/16
% if ~contains_replace(avg.dir, [filesep, dirN, filesep])
%     filename = fullfile(avg.dir, dirN, avg.filename);
% else
    filename = fullfile(avg.dir, avg.filename);
% end
BS = avg.photodiode;
if ischar(BS)
    BS = str2double(BS);
end
if BS < 1
    BS =1;
end
if ischar(avg.absoluteSF)
    avg.absoluteSF = str2double(avg.absoluteSF);
end
if ischar(avg.I0ofstandard)
    avg.I0ofstandard = str2double(avg.I0ofstandard);
end
if ischar(avg.I0ofsample)
    avg.I0ofsample = str2double(avg.I0ofsample);
end
Scalefactor = avg.absoluteSF;%*avg.I0ofstandard/avg.I0ofsample;


AVGfolder = [];

d = 1; % sample thickness, 1cm.
%offset = 0;    
[datadir, fn, ext]=fileparts(filename);
dfn = fn;
%offset = m.offset;

if isempty(m)
    rtn = -1;
    return
end
  
if isempty(dfn)
    rtn = 0;
    return
end

datafilename = fullfile(datadir, [dfn, ext]);
%datafilename = fullfile(datadir, dirN, [dfn, ext]);
if isempty(AVGfolder)
    AVGfolder = 'Averaged';
end

savefilename = fullfile(avg.dir, AVGfolder, [dfn, '.dat']);
%savefilename = fullfile(avg.dir, dirN, AVGfolder, [dfn, '.dat']);
%sImg=imgUpsideDn(double(imread(datafilename)));
isfileNOTthere = 0;
while(isfileNOTthere<30)
    if ~exist(datafilename,'file')
        pause(0.5)
        isfileNOTthere = isfileNOTthere + 1;
    else
        break
    end
end

if isfileNOTthere > 0
    pause(1); % PE takes time to save data. To make sure files are saved.
    fprintf('isfileNOTthere is %i\n', isfileNOTthere);
end

% for both tiff and hdf5 data, 2/3/2022
%[~, fn9, ext9] = fileparts(datafilename);

if strcmpi(ext, '.tif')      % tif file
    try
        sImg=flipud(double(imread(datafilename)));
    catch
        sImg = [];
        fprintf('File %s is not found\n', datafilename);
    end
    %sImg = imgUpsideDn(double(imread(cfile)));
elseif strcmpi(ext, '.h5')   % hdf5 data
    if contains(dfn, 'master')
        fprintf('%s is a master file, will not be proecssed!\n',fn9);       
    else
        try
            dat9 = readHdf5(datafilename, m.Beamline);
            sImg = flipud(double(dat9.data'));
        catch
            sImg=[];
            fprintf('File %s is not found / read\n', datafilename);
        end
    end
else
    fprintf('%s is not supported and proecssed!\n',datafilename);
end   


% try
%     sImg=flipud(double(imread(datafilename)));
% catch
%     sImg = [];
%     fprintf('File %s is not found\n', datafilename);
% end
%sImg = sImg - offset;
if isempty(sImg)
    rtn = -2;
    return
end

if isfield(m, 'absIntCoeff')  
    Scalefactor = m.absIntCoeff;  % define scalefactor from setup files
%    disp('read Scale factor from setup file')
end
if ~isfield(m, 'mask')
    error('Mask is not in the mat file.\n');
end
if isfield(avg, 'energynew') && isfield(avg, 'energy')
    qscale = avg.energy/avg.energynew;
    avg.energy = avg.energynew;
else
    qscale = 1;
end

data = circavgnew2(sImg, m.mask, m.qCMap, m.qRMap, m.qArray, m.offset, m.limits);

if abs(qscale-1)>1E-5
    qdata = data(:,1);
    fprintf('qscale value %0.3f \n', qscale);
    Idata = interp1(data(:,1)/qscale, data(:,2), m.qArray);
    data(:,1) = qdata;
    data(:,2) = Idata;
end
dataNorm=[data(:,1) data(:,2:3)/BS*Scalefactor/d];
try
    fid = fopen(savefilename, 'w');
    fprintf(fid, '%% Filename : %s\n', avg.filename);
    fprintf(fid, '%% Date & Time : %s\n', datestr(now));
    fprintf(fid, '%% X-ray Energy (keV) : %0.5f\n', avg.energy);
    fprintf(fid, '%% Exposure Time (s) : %0.3f\n', avg.expt);
    if contains(avg.dir, 'SAXS')
%    switch dirN
%        case 'SAXS'
            if isfield(avg, 'saxsBC')
                fprintf(fid, '%% Beam Center : %0.5f, %0.5f\n', avg.saxsBC(1), avg.saxsBC(2));
                fprintf(fid, '%% Sample to Detector Distance (SDD) (mm) : %0.3f\n', avg.saxsSDD);
                fprintf(fid, '%% Detector Pixel Size (mm) : %0.3f\n', avg.saxsPIXSIZE);
            end
    end
    fprintf(fid, '%% Photodiode Value : %0.3f\n', BS);
    fprintf(fid, '%% I0 of Sample : %i\n', avg.I0ofsample);
    fprintf(fid, '%% I0 of Standard : %i\n', avg.I0ofstandard);
%    fprintf(fid, '%% Multiply I(q) with the sample thickness (cm) to convert it into absolute units.\n');
    fprintf(fid, '%% \n');
    fprintf(fid, '%% q(A^-1)   I(q)    sqrt(I(q))\n');
    fclose(fid);
    dlmwrite(savefilename,dataNorm,'delimiter','\t','precision','%.8e', '-append');
    cmd = sprintf('chmod 666 %s', savefilename);
    system(cmd);  % change rewrite permission for 12IDC.
    fprintf('%s is processed\n', savefilename);
    rtn = 1;
catch
    rtn = 0;
    fprintf('Cannot write file on the disk.\n')
end